# MA_LANGUAGE

## About
In this project I developed a tiny programming language.
To be exact I:
### 1. Developed language's grammar (details will be added later, but you can try to get it by exploring [great_grammar](great_grammar.cpp)).

![example of ma_language code](Pictures/exapmle_of_code.PNG)

### 2. Created frontend for this language. I made RDP (recursive descent parser). As a result i got AST (abstract syntax tree)

![abstract syntx tree](Pictures/ast.PNG)

### 3.Created backend that translates AST to assembler of [my virtual machine](https://github.com/matmuher/flip-flop/tree/main/processor)
![example of generated assemble code](Pictures/asm.PNG)

## Programs example:

Factorial:

```
define main ()
{
	n:10;
	n:fact(n);
	print(n);
	return 0;
}!

define fact (n)
{
	SnowBall:1;
	x:1;
	while(x<n+1)
	{
	SnowBall:SnowBall*x;
	x:x+1;
	};

	return SnowBall;
}!
$
```

Fibbonachi

```
define main ()
{
	n:10;
	FibVal:Fib(n);
	print(FibVal);
	return 0;
}!

define Fib (n)
{
	if(n=1){return 1;};
	if(n=2){return 1;};

	return Fib(n-1)+Fib(n-2);
}!
$
```

